import { Image } from './image';
import axios from 'axios';
import dataUriToBuffer from 'data-uri-to-buffer';

// Define an async function to create an image in Node.js
export async function createImageInNode(src: string): Promise<Image> {
  // Declare a variable to store the buffer
  let buffer: Buffer;

  // Check if the src is a URL or a data URL
  if (src.startsWith('http')) {
    // If it is a URL, make a GET request and get the buffer from the response
    const response = await axios.get(src, { responseType: 'arraybuffer' });
    buffer = Buffer.from(response.data);
  } else if (src.startsWith('data')) {
    // If it is a data URL, convert it to a buffer using the data-uri-to-buffer module
    buffer = dataUriToBuffer(src);
  } else {
    // If it is neither, throw an error
    throw new Error(`Invalid src for image: ${src}`);
  }

  // Get the width and height of the image from the buffer
  // Assuming the buffer is in PNG format
  // See https://www.w3.org/TR/PNG/#11IHDR for details
  const width = buffer.readUInt32BE(16);
  const height = buffer.readUInt32BE(20);

  // Create an image object with the given size
  const image = new Image({ x: width, y: height });

  // Loop through all the pixels of the buffer and set their color in the image object
  // Assuming the buffer is in RGBA format
  // See https://www.w3.org/TR/PNG/#6Colour-values for details
  for (let i = 0; i < image.size.y; i++) {
    for (let j = 0; j < image.size.x; j++) {
      // Get the index of the pixel in the buffer
      // Skipping the first 33 bytes of the PNG header and CRC
      const index = 33 + (i * image.size.x + j) * 4;

      // Get the red, green, blue and alpha values of the pixel from the buffer
      const red = buffer[index];
      const green = buffer[index + 1];
      const blue = buffer[index + 2];
      const alpha = buffer[index + 3] / 255;

      // Create a color object from the pixel values
      const color = Color.fromValues(red, green, blue, alpha);

      // Set the color of the pixel in the image object
      image.setPixel({ x: j, y: i }, color);
    }
  }

  // Return the image object as a promise
  return Promise.resolve(image);
}